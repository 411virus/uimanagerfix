local HttpService = game:GetService('HttpService')

local SaveManager = {}

SaveManager.Folder = 'LinoriaLibSettings'
SaveManager.Ignore = {}

SaveManager.Parsers = {
    Toggle = {
        Save = function(idx, object)
            return { type = 'Toggle', idx = idx, value = object.Value }
        end,
        Load = function(idx, data)
            local toggle = Toggles[idx]
            if toggle then
                toggle:SetValue(data.value)
            end
        end
    },
    Slider = {
        Save = function(idx, object)
            return { type = 'Slider', idx = idx, value = tostring(object.Value) }
        end,
        Load = function(idx, data)
            local option = Options[idx]
            if option then
                option:SetValue(data.value)
            end
        end
    },
    -- Define other parsers similarly
}

function SaveManager:SetIgnoreIndexes(list)
    for _, key in ipairs(list) do
        self.Ignore[key] = true
    end
end

function SaveManager:SetFolder(folder)
    self.Folder = folder
    self:BuildFolderTree()
end

function SaveManager:Save(name)
    if not name then
        return false, 'No config file selected'
    end

    local fullPath = self.Folder .. '/settings/' .. name .. '.json'

    local data = { objects = {} }

    for idx, toggle in pairs(Toggles) do
        if not self.Ignore[idx] then
            table.insert(data.objects, self.Parsers.Toggle.Save(idx, toggle))
        end
    end

    for idx, option in pairs(Options) do
        if self.Parsers[option.Type] and not self.Ignore[idx] then
            table.insert(data.objects, self.Parsers[option.Type].Save(idx, option))
        end
    end

    local success, encoded = pcall(HttpService.JSONEncode, HttpService, data)
    if not success then
        return false, 'Failed to encode data'
    end

    local file = io.open(fullPath, 'w')
    if not file then
        return false, 'Failed to open file for writing'
    end

    file:write(encoded)
    file:close()

    return true
end

-- Implement Load, IgnoreThemeSettings, BuildFolderTree, RefreshConfigList, SetLibrary,
-- LoadAutoloadConfig, BuildConfigSection functions similarly

return SaveManager
